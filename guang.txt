#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<conio.h>
void L(Cube *m,int i)//将魔方的左面顺时针转i次
{
Cube n;
for(;i>0;i--)
{
n=*m;
clockwise(&m->left,1);
m->up.s[1][1]=n.back.s[3][3];
m->up.s[2][1]=n.back.s[2][3];
m->up.s[3][1]=n.back.s[1][3];
m->back.s[1][3]=n.down.s[3][1];
m->back.s[2][3]=n.down.s[2][1];
m->back.s[3][3]=n.down.s[1][1];
m->down.s[1][1]=n.front.s[1][1];
m->down.s[2][1]=n.front.s[2][1];
m->down.s[3][1]=n.front.s[3][1];
m->front.s[1][1]=n.up.s[1][1];
m->front.s[2][1]=n.up.s[2][1];
m->front.s[3][1]=n.up.s[3][1];
}
}
void U(Cube *m,int i)//将魔方的上面顺时针转i次
{
Cube n;
for(;i>0;i--)
{
n=*m;
clockwise(&m->up,1);
m->front.s[1][1]=n.right.s[1][1];
m->front.s[1][2]=n.right.s[1][2];
m->front.s[1][3]=n.right.s[1][3];
m->right.s[1][1]=n.back.s[1][1];
m->right.s[1][2]=n.back.s[1][2];
m->right.s[1][3]=n.back.s[1][3];
m->back.s[1][1]=n.left.s[1][1];
m->back.s[1][2]=n.left.s[1][2];
m->back.s[1][3]=n.left.s[1][3];
m->left.s[1][1]=n.front.s[1][1];
m->left.s[1][2]=n.front.s[1][2];
m->left.s[1][3]=n.front.s[1][3];
}
}
void D(Cube *m,int i)//将魔方的底面顺时针转i次
{
Cube n;
for(;i>0;i--)
{
n=*m;
clockwise(&m->down,1);
m->front.s[3][1]=n.left.s[3][1];
m->front.s[3][2]=n.left.s[3][2];
m->front.s[3][3]=n.left.s[3][3];
m->left.s[3][1]=n.back.s[3][1];
m->left.s[3][2]=n.back.s[3][2];
m->left.s[3][3]=n.back.s[3][3];
m->back.s[3][1]=n.right.s[3][1];
m->back.s[3][2]=n.right.s[3][2];
m->back.s[3][3]=n.right.s[3][3];
m->right.s[3][1]=n.front.s[3][1];
m->right.s[3][2]=n.front.s[3][2];
m->right.s[3][3]=n.front.s[3][3];
}
}
void MR(Cube *m,int i)//将魔方的左面和右面之间的面以右面为基准顺时针旋转1次
{
Cube n;
for(;i>0;i--)
{
n=*m;
m->up.s[1][2]=n.front.s[1][2];
m->up.s[2][2]=n.front.s[2][2];
m->up.s[3][2]=n.front.s[3][2];
m->front.s[1][2]=n.down.s[1][2];
m->front.s[2][2]=n.down.s[2][2];
m->front.s[3][2]=n.down.s[3][2];
m->down.s[1][2]=n.back.s[3][2];
m->down.s[2][2]=n.back.s[2][2];
m->down.s[3][2]=n.back.s[1][2];
m->back.s[3][2]=n.up.s[1][2];
m->back.s[2][2]=n.up.s[2][2];
m->back.s[1][2]=n.up.s[3][2];
}
}